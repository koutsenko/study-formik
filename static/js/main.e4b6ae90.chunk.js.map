{"version":3,"sources":["components/FormikDemo/index.module.css","components/Debug/index.module.css","components/Debug/index.js","components/FormikDemo/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Debug","data","className","styles","debug","JSON","stringify","imitateRequest","a","delay","errors","login","push","password","ms","Promise","resolve","setTimeout","MyInput","props","useField","field","Fieldset","name","label","rest","fieldset","htmlFor","id","msg","error","Schema","Yup","shape","email","required","FormikDemo","submit","values","bag","length","alert","collectedErrors","reduce","acc","cur","setErrors","credentials","formikContainer","initialValues","validationSchema","onSubmit","form","placeholder","type","value","isSubmitting","loader","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e4b6ae90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"credentials\":\"FormikDemo_credentials__34mSK\",\"formikContainer\":\"FormikDemo_formikContainer__2SaYn\",\"form\":\"FormikDemo_form__34LNi\",\"label\":\"FormikDemo_label__3h2E8\",\"fieldset\":\"FormikDemo_fieldset__1R6lV\",\"submit\":\"FormikDemo_submit__3N4hb\",\"error\":\"FormikDemo_error__3nwkD\",\"loader\":\"FormikDemo_loader__2Rd6S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"debug\":\"Debug_debug__hbKo2\"};","import styles from \"./index.module.css\";\n\nimport React from \"react\";\n\nconst Debug = (data) => (\n  <span className={styles.debug}>{JSON.stringify(data, null, 2)}</span>\n);\n\nexport default Debug;\n","import styles from \"./index.module.css\";\n\nimport React from \"react\";\nimport { Formik, Form, useField, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport Debug from \"../Debug\";\n\nconst defaultDelay = 3000;\nconst demoLogin = \"demo@mail.ru\";\nconst demoPassword = \"12345678\";\nconst requiredMsg = \"Поле не заполнено\";\n\nconst imitateRequest = async (data) => {\n  await delay(defaultDelay);\n\n  const errors = [];\n\n  if (data.login !== demoLogin) {\n    errors.push({ login: \"Пользователь не существует\" });\n  }\n\n  if (data.login === demoLogin && data.password !== demoPassword) {\n    errors.push({ password: \"Пароль неверный\" });\n  }\n\n  return errors;\n};\n\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst MyInput = (props) => {\n  const [field] = useField(props);\n\n  return <input {...field} {...props} />;\n};\n\nconst Fieldset = ({ name, label, ...rest }) => (\n  <span className={styles.fieldset}>\n    <label className={styles.label} htmlFor={name}>\n      {label}\n    </label>\n    <MyInput id={name} name={name} {...rest} />\n    <ErrorMessage name={name}>\n      {(msg) => <div className={styles.error}>{msg}</div>}\n    </ErrorMessage>\n  </span>\n);\n\n/**\n * Note that only first validation error will be shown.\n */\nconst Schema = Yup.object().shape({\n  login: Yup.string().email(\"Неверный формат почты\").required(requiredMsg),\n  password: Yup.string().required(requiredMsg),\n});\n\nconst FormikDemo = () => {\n  /**\n   * Read docs https://jaredpalmer.com/formik/docs/guides/form-submission\n   */\n  const submit = async (values, bag) => {\n    const errors = await imitateRequest(values);\n    if (errors.length === 0) {\n      alert(\"Вход успешный, можно редиректить\");\n    } else {\n      const collectedErrors = errors.reduce(\n        (acc, cur) => ({ ...acc, ...cur }),\n        {}\n      );\n\n      bag.setErrors(collectedErrors);\n    }\n  };\n\n  return (\n    <>\n      <span className={styles.credentials}>\n        <span>Демо учетка</span>\n        <br />\n        <span>{demoLogin}</span>\n        <br />\n        <span>{demoPassword}</span>\n      </span>\n      <p>Formik demo</p>\n      <div className={styles.formikContainer}>\n        <Formik\n          initialValues={{ login: \"\", password: \"\" }}\n          validationSchema={Schema}\n          onSubmit={submit}\n        >\n          {(props) => (\n            <Form className={styles.form}>\n              <Fieldset name=\"login\" label=\"Логин\" placeholder=\"foo@bar.org\" />\n              <br />\n              <Fieldset name=\"password\" label=\"Пароль\" />\n              <br />\n              <input className={styles.submit} type=\"submit\" value=\"Войти\" />\n              <Debug {...props} />\n              {props.isSubmitting && (\n                <div className={styles.loader}>\n                  <span>Loading...</span>\n                </div>\n              )}\n            </Form>\n          )}\n        </Formik>\n      </div>\n    </>\n  );\n};\n\nexport default FormikDemo;\n","import React from \"react\";\nimport \"./App.css\";\nimport FormikDemo from \"./components/FormikDemo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"App-content\">\n          <FormikDemo />\n        </div>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}